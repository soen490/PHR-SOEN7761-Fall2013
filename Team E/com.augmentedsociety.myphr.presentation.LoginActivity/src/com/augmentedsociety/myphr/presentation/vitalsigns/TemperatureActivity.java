package com.augmentedsociety.myphr.presentation.vitalsigns;

import java.text.DecimalFormat;
import java.util.Date;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.augmentedsociety.myphr.R;
import com.augmentedsociety.myphr.domain.MapperException;
import com.augmentedsociety.myphr.domain.ReadingSource;
import com.augmentedsociety.myphr.domain.TemperatureMapper;
import com.augmentedsociety.myphr.domain.TemperatureReading;
import com.augmentedsociety.myphr.domain.logs.LogEventType;
import com.augmentedsociety.myphr.external.ForaIR20bTemperatureReader;
import com.augmentedsociety.myphr.presentation.SpeechHelp;
import com.augmentedsociety.myphr.presentation.customviews.SquareImageButton;
import com.augmentedsociety.myphr.presentation.logs.LogEventEmitter;

/**
 * Temperature Activity class for user inputs
 * 
 * @author Serge-Antoine
 */

public class TemperatureActivity extends VitalSignComponent
{
	/**The following instantiations allow an instance of a controller to take the arguments generated by
   * this activity in order for the controller itself to submit the data the the proper mapper via the commands package for
   * compilation, determined by the VITAL_SIGN string's value */
  private static final int REQUEST_ENABLE_BT = 10;
  private VitalSignsController mController = new VitalSignsController();
  private static final String VITAL_SIGN = "Temperature";
  private TemperatureReading mBluetoothReading = null;
  private static boolean savedSuccessful = false;
  private final String TEMPERATURE = "temperature";
  
	public TemperatureActivity(Activity mAct)
	{
		super(mAct);
		mAct.setTitle("Temperature");
		
		EditText t = (EditText) mAct.findViewById(R.id.temperature_value);
		t.setSelection(t.getText().length());
		
		SpeechHelp tut = SpeechHelp.getInstance();
		if(tut.isActive())
		{
			tut.playTutorial(mAct, TEMPERATURE);
		}
		else
		{
			tut.stopTutorial();
		}
	}
  
	/**
	 * Handles the "submit"/manual button press; if a Bluetooth reading was performed, this method will automatically be aware of it
	 * and handle it correctly in a "Bluetooth context entry" for the commands to the mapper i.e. saved as Bluetooth reading in the DB.
	 */
	public void submit(View iView, Date timeOfReading) 
	{
		/**An object created by bluetooth reading will have BLUETOOTH as a ReadingSource. */
		if (null != mBluetoothReading && ReadingSource.BLUETOOTH == mBluetoothReading.getMeasurementSource())
		{
			/**Get the view's current context for proper detection of activity launch*/
			Context context = iView.getContext();
			
			/**References to text box values*/
			TextView t = (TextView) mAct.findViewById(R.id.temperature_value);
			String tText = t.getText().toString();
			if (!tText.isEmpty())
			{
				float temperature = Float.valueOf(t.getText().toString());
				
				try
				{
					/**Since the TemperatureReading has already been instantiated by the external BluetoothDevice mapper, it is passed directly
					 * to the TemperatureMapper, without having to go through controller and command for VitalSignObject instantiation.*/
					TemperatureMapper.insert(mBluetoothReading, context);
					
					/**Fires a LogEvent to the LogItemEditor*/
					LogEventEmitter.fireLogEvent(this, iView.getContext(), LogEventType.VS_TEMP_CREATE);
					
					/**Calls a short text box confirming data save. Should not occur if an exception should be caught inside mappers*/
//			    Toast.makeText(context, context.getString(R.string.confirm_save), Toast.LENGTH_SHORT).show();
					savedSuccessful = true;
					
					/**After data save, text box values are reset and focus is placed to the first entry of the page list*/
					t = (TextView) mAct.findViewById(R.id.temperature_value);
					t.setText(null);
					
					mAct.findViewById(R.id.temperature_value).requestFocus((int)temperature, null);
				}
				catch (MapperException e)
				{
					Toast.makeText(context, e.getMessage(), Toast.LENGTH_LONG).show();
				}
			}
			else
			{
//				Toast.makeText(context, context.getString(R.string.prompt_save_again), Toast.LENGTH_LONG).show();
				savedSuccessful = false;
			}
		}
		/**Manual input of reading */
		else
		{
			/**Get the view's current context for proper detection of activity launch*/
			Context context = iView.getContext();
			
			/**References to text box values*/
			TextView t = (TextView) mAct.findViewById(R.id.temperature_value);
			String tText = t.getText().toString();
			if (!tText.isEmpty())
			{
				float temperature = Float.valueOf(t.getText().toString());
//				Date timeOfReading = getDateValue(R.id.datePickerTemp, R.id.timePickerTemp);
				
				/**Controller passes user inputs to right mapper via commands package; data then processed into database upon successful entry.*/
				mController.manipulate(temperature, timeOfReading, VITAL_SIGN, ReadingSource.KEYED, context);
				/**Fires a LogEvent to the LogItemEditor*/
				LogEventEmitter.fireLogEvent(this, iView.getContext(), LogEventType.VS_TEMP_CREATE);
				
				/**Calls a short text box confirming data save. Should not occur if an exception should be caught inside mappers*/
//		    Toast.makeText(context, context.getString(R.string.confirm_save), Toast.LENGTH_SHORT).show();
				savedSuccessful = true;
				
				/**After data save, text box values are reset and focus is placed to the first entry of the page list*/
				t = (TextView) mAct.findViewById(R.id.temperature_value);
				t.setText(null);
				
				mAct.findViewById(R.id.temperature_value).requestFocus((int)temperature, null);
			}
			else
			{
//				Toast.makeText(context, context.getString(R.string.prompt_save_again), Toast.LENGTH_LONG).show();
				savedSuccessful = false;
			}
		}
	}

	/**
	 * Handles the "Bluetooth" button press
	 */
	public void bluetooth(View iView) 
	{
	  BluetoothAdapter wBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
	  
	  if (wBluetoothAdapter == null) 
	  {
	    Toast.makeText(iView.getContext(), R.string.bluetooth_not_available, Toast.LENGTH_LONG).show();
	    return;
	  }
	  
	  if (!wBluetoothAdapter.isEnabled()) 
	  {
	    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
	    mAct.startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
	    return;
	  }
 
	  boolean success = false;
	  int attemptsLeft = 5;
	  
	  final ProgressDialog wellness_progress = ProgressDialog.show(iView.getContext(), "", iView.getContext().getString(R.string.bluetooth_request), true);
    wellness_progress.setCancelable(true);
    
    /**
     * Asynchronic dialog box showing progression of reading transfer (note: there seems to be an inevitable lag right before retrieving the
     * readings; the following may or may not appear (user feedback may or may not appear).
     */
    AsyncTask<Void, Void, Boolean> bluetooth_waitForReading = new AsyncTask<Void, Void, Boolean>()
		{
	  	@Override
      protected Boolean doInBackground(Void... params) 
	  	{
	  	//Loading of 3 seconds on average for data gathering from bluetooth thermometer
	  		long timeStarted = System.currentTimeMillis();
	  		while (System.currentTimeMillis() - timeStarted < 3000)
	  		{
	        try 
	        {
	        	Thread.sleep(100);
	        } 
	        catch (InterruptedException e) {}
	  		}
		  	wellness_progress.dismiss();
        return null;
      };
	  };
	  
	  bluetooth_waitForReading.execute(null, null, null);
	  
	  while (!success && attemptsLeft > 0)
	  {
	    try
	    {
	      mBluetoothReading =  ForaIR20bTemperatureReader.getLastTemperatureReading(mAct);
	      success = true;
	    } 
	    catch (Exception e)
	    {
	      --attemptsLeft;
	    }
	  }
	  if (success)
	  {
	  	String wTemperatureString = (new DecimalFormat("###.#")).format(mBluetoothReading.getTemperature());
	    
	  	//Puts the retrieved temperature value on the textbox, ready to submit.
	    TextView t = (TextView) mAct.findViewById(R.id.temperature_value);
	    t.setText(wTemperatureString);
	  }
	  else
	  {
	    msgbox ("AugmentedSynergy has failed to read the temperature from the bluetooth device after 5 attempts. Move the device closer and make sure it is on.", "Error");
	  }
	}

	protected void msgbox(String iMessage, String iTitle)
	{
    AlertDialog.Builder dlgAlert  = new AlertDialog.Builder(mAct); //mAct: you may want to replace with 'this' if you move this method                     
    dlgAlert.setMessage(iMessage);
    dlgAlert.setTitle(iTitle);              
    dlgAlert.setPositiveButton("OK", null);
    dlgAlert.setCancelable(true);
    dlgAlert.create().show();
	}
	
	public static boolean getSavedSuccessful()
	{
		return savedSuccessful;
	}
	
	protected void onActivityResult (int iRequestCode, int iResultCode, Intent iData)
	{
	  if (iRequestCode == REQUEST_ENABLE_BT)
	  {
	    if(iResultCode == Activity.RESULT_OK) //mAct: you may want to remove it if you move this method
	    {
	      msgbox("Bluetooth has been successfully enabled!", "Success");
	      bluetooth(null);
	    }
	    else
	      msgbox("Please enable Bluetooth to allow communicating to the device.", "Message");
	  }
	  else
	  {
	    msgbox("TemperatureActivity: Unknown request code: " + iRequestCode, "Error");
	  }
	}
	
	public void finish(View iView)
	{
		//return to previous view
		mAct.finish();
	}
	
	public void preparePageTransition()
	{
		if (((SquareImageButton) (VitalSignsActivity.VITAL_SIGN_ACTIVITY
				.findViewById(R.id.body_temperature))).isShown())
			showKeyboard();
		setTextFieldFocus(R.id.temperature_value);
		createNextPageListener(R.id.temperature_value);
	}
	
}

