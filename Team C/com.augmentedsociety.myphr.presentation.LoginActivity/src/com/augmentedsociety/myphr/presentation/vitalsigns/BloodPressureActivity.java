package com.augmentedsociety.myphr.presentation.vitalsigns;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.drawable.BitmapDrawable;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.os.AsyncTask;
import android.text.InputFilter.LengthFilter;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebView.FindListener;
import android.widget.EditText;
import android.widget.PopupWindow;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import com.augmentedsociety.myphr.R;
import com.augmentedsociety.myphr.domain.BloodPressureMapper;
import com.augmentedsociety.myphr.domain.BloodPressureReading;
import com.augmentedsociety.myphr.domain.MapperException;
import com.augmentedsociety.myphr.domain.ReadingSource;
import com.augmentedsociety.myphr.domain.WeightMapper;
import com.augmentedsociety.myphr.domain.WeightReading;
import com.augmentedsociety.myphr.domain.logs.LogEventType;
import com.augmentedsociety.myphr.external.ForaD15BloodPressureSugarReader;
import com.augmentedsociety.myphr.presentation.SpeechHelp;
import com.augmentedsociety.myphr.presentation.ToastMessage;
import com.augmentedsociety.myphr.presentation.customviews.SquareImageButton;
import com.augmentedsociety.myphr.presentation.logs.LogEventEmitter;

/**
 * Blood Pressure Activity class for user inputs
 * 
 * @author Serge-Antoine Naim
 *
 */

public class BloodPressureActivity extends VitalSignComponent
{
  /**The following instantiations allow an instance of a controller to take the arguments generated by
   * this activity in order for the controller itself to submit the data the the proper mapper via the commands package for
   * compilation, determined by the VITAL_SIGN string's value */
  private VitalSignsController mController = new VitalSignsController();
  private static final String VITAL_SIGN = "BloodPressure";
  private BloodPressureReading mBluetoothReading = null;
  private static final int REQUEST_ENABLE_BT = 1;
  static private boolean savedSuccessful = false;
  private final String PLACEHOLDER_NO_VALUE = "0";
  private final String BLOOD_PRESSURE = "bloodPressure";
  protected boolean isDataValid = false;//fh
  
	public BloodPressureActivity(Activity mAct)
	{
		super(mAct);
		mAct.setTitle("Blood Pressure");
		
		SpeechHelp tut = SpeechHelp.getInstance();
		if(tut.isActive())
		{
			tut.playTutorial(mAct, BLOOD_PRESSURE);
		}
		else
		{
			tut.stopTutorial();
		}
	}
	
	public void setSystolicFocused(){
		EditText systolic = (EditText) mAct.findViewById(R.id.blood_pressure_systolic_value);
		systolic.requestFocus();
		systolic.setSelection(systolic.getText().length());
	}
	
	public void setDiastolicFocused(){
		EditText diastolic = (EditText) mAct.findViewById(R.id.blood_pressure_diastolic_value);
		diastolic.requestFocus();
		diastolic.setSelection(diastolic.getText().length());
	}
	
	public void setHeartRateFocused(){
		EditText heartRate = (EditText) mAct.findViewById(R.id.blood_pressure_heart_rate_value);
		heartRate.requestFocus();
		heartRate.setSelection(heartRate.getText().length());
	}
	
	public static boolean getSavedSuccessful()
	{
		return savedSuccessful;
	}

  /**
	 * Handles the "submit"/manual button press; if a Bluetooth reading was performed, this method will automatically be aware of it
	 * and handle it correctly in a "Bluetooth context entry" for the commands to the mapper i.e. saved as Bluetooth reading in the DB.
	 */
  public void submit(View iView, Date timeOfReading, boolean lastActivity)
  {
    //fh
	  	if (null != mBluetoothReading && ReadingSource.BLUETOOTH == mBluetoothReading.getMeasurementSource())
	  	{
	  		/**Get the view's current context for proper detection of activity launch*/
		    Context context = iView.getContext();
		    
				/**References to text box values*/
				TextView hr, sys, dia;
				hr = (TextView) mAct.findViewById(R.id.blood_pressure_heart_rate_value);
				sys = (TextView) mAct.findViewById(R.id.blood_pressure_systolic_value);
				dia = (TextView) mAct.findViewById(R.id.blood_pressure_diastolic_value);
				String tHr, tSys, tDia;
				tHr = hr.getText().toString();
				tSys = sys.getText().toString();
				tDia = sys.getText().toString();
				if (!tHr.isEmpty() && !tSys.isEmpty() && !tDia.isEmpty())
				{
	//				int heatolic= Integer.valueOf(tSys);
					int diastolic= Integer.valueOf(tDia);
					
					try
					{
						/**Since the BloodPressureReading has already been instantiated by the external BluetoothDevice mapper, it is passed directly
						 * to the BloodPressureMapper, without having to go through controller and command for VitalSignObject instantiation.*/
						BloodPressureMapper.insert(mBluetoothReading, context);
						
						/**Fires a LogEvent to the LogItemEditor*/
						LogEventEmitter.fireLogEvent(this, iView.getContext(), LogEventType.VS_BLOODPRESSURE_CREATE);
						
						/**Calls a short text box confirming data save. Should not occur if an exception should be caught inside mapper*/
	//			    Toast.makeText(context, context.getString(R.string.confirm_save), Toast.LENGTH_SHORT).show();
						savedSuccessful = true;
						VitalSignsActivity.hasBeenSaved = true;//fh
						if (lastActivity){
							saveMethod(dia);
						}
						
						
				    /**After data save, text box values are reset and focus is placed to the first entry of the page list*/
						hr = (TextView) mAct.findViewById(R.id.blood_pressure_heart_rate_value);
						hr.setText(null);
						sys = (TextView) mAct.findViewById(R.id.blood_pressure_systolic_value);
						sys.setText(null);
						dia = (TextView) mAct.findViewById(R.id.blood_pressure_diastolic_value);
						dia.setText(null);
	
						mAct.findViewById(R.id.blood_pressure_heart_rate_value).requestFocus(diastolic, null);
					}
					catch (MapperException e)
					{
						Toast.makeText(context, e.getMessage(), Toast.LENGTH_LONG).show();
					}
				}
				else
				{
	//				Toast.makeText(context, context.getString(R.string.prompt_save_again), Toast.LENGTH_LONG).show();
					savedSuccessful = false;
				}
	  	}
	  	else
	  	{	
		  	/**Get the view's current context for proper detection of activity launch*/
		    Context context = iView.getContext();
		    
				/**References to text box values*/
				TextView hr, sys, dia;
				hr = (TextView) mAct.findViewById(R.id.blood_pressure_heart_rate_value);
				sys = (TextView) mAct.findViewById(R.id.blood_pressure_systolic_value);
				dia = (TextView) mAct.findViewById(R.id.blood_pressure_diastolic_value);
				String tHr, tSys, tDia;
				tHr = hr.getText().toString().isEmpty() ? PLACEHOLDER_NO_VALUE : hr.getText().toString();
				tSys = sys.getText().toString().isEmpty() ? PLACEHOLDER_NO_VALUE : sys.getText().toString();
				tDia = dia.getText().toString().isEmpty() ? PLACEHOLDER_NO_VALUE : dia.getText().toString();
				
				if (!tHr.isEmpty() && !tSys.isEmpty() && !tDia.isEmpty())
				{
					int heartRate = Integer.valueOf(tHr);
					int systolic= Integer.valueOf(tSys);
					int diastolic= Integer.valueOf(tDia);
	//				Date timeOfReading = getDateValue(R.id.datePickerBP, R.id.timePickerBP);
					
					/**Controller passes user inputs to right mapper via commands package; data then processed into database upon successful entry.*/
					mController.manipulate(systolic, diastolic, heartRate, timeOfReading, VITAL_SIGN, ReadingSource.KEYED, context);
					
					/**Fires a LogEvent to the LogItemEditor*/
					LogEventEmitter.fireLogEvent(this, iView.getContext(), LogEventType.VS_BLOODPRESSURE_CREATE);
					
					/**Calls a short text box confirming data save. Should not occur if an exception should be caught inside mapper*/
	//		    Toast.makeText(context, context.getString(R.string.confirm_save), Toast.LENGTH_SHORT).show();
					savedSuccessful = true;
					VitalSignsActivity.hasBeenSaved = true;//fh
					if (lastActivity){
						saveMethod(dia);
					}
					
			    /**After data save, text box values are reset and focus is placed to the first entry of the page list*/
					hr = (TextView) mAct.findViewById(R.id.blood_pressure_heart_rate_value);
					hr.setText(null);
					sys = (TextView) mAct.findViewById(R.id.blood_pressure_systolic_value);
					sys.setText(null);
					dia = (TextView) mAct.findViewById(R.id.blood_pressure_diastolic_value);
					dia.setText(null);
			    
					mAct.findViewById(R.id.blood_pressure_heart_rate_value).requestFocus(diastolic, null);
				}
				else
				{
	//				Toast.makeText(context, context.getString(R.string.prompt_save_again), Toast.LENGTH_LONG).show();
					savedSuccessful = false;
				}
	  	}
  }

  /**
	 * Handles the "Bluetooth" button press
	 */
  public void bluetooth(View iView) 
  {
  	BluetoothAdapter wBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
	  
	  if (wBluetoothAdapter == null) 
	  {
	    Toast.makeText(iView.getContext(), R.string.bluetooth_not_available, Toast.LENGTH_LONG).show();
	    return;
	  }
	  
	  if (!wBluetoothAdapter.isEnabled()) 
	  {
	    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
	    mAct.startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
	    return;
	  }
 
	  boolean success = false;
	  int attemptsLeft = 5;
	  
	  final ProgressDialog wellness_progress = ProgressDialog.show(iView.getContext(), "", iView.getContext().getString(R.string.bluetooth_request), true);
    wellness_progress.setCancelable(true);
    
    /**
     * Asynchronic dialog box showing progression of reading transfer (note: there seems to be an inevitable lag right before retrieving the
     * readings; the following may or may not appear (user feedback may or may not appear).
     */
    AsyncTask<Void, Void, Boolean> bluetooth_waitForReading = new AsyncTask<Void, Void, Boolean>()
		{
	  	@Override
      protected Boolean doInBackground(Void... params) 
	  	{
	  		//Loading of 3 seconds on average for data gathering from bluetooth blood pressure device
	  		long timeStarted = System.currentTimeMillis();
	  		while (System.currentTimeMillis() - timeStarted < 3000)
	  		{
	        try 
	        {
	        	Thread.sleep(100);
	        } 
	        catch (InterruptedException e) {}
	  		}
		  	wellness_progress.dismiss();
        return null;
      };
	  };
	  bluetooth_waitForReading.execute(null, null, null);
	  
	  while (!success && attemptsLeft > 0)
	  {
	    try
	    {
	      mBluetoothReading =  ForaD15BloodPressureSugarReader.getLastBloodPressureReading(mAct);
	      success = true;
	    } 
	    catch (Exception e)
	    {
	      --attemptsLeft;
	    }
	  }
	  if (success)
	  {
	  	String wSystolicString = (new DecimalFormat("###")).format(mBluetoothReading.getSystolic());
	  	String wDiastolicString = (new DecimalFormat("###")).format(mBluetoothReading.getDiastolic());
	  	String wHeartRateString = (new DecimalFormat("###")).format(mBluetoothReading.getHeartrate());
	    
	  	//Puts the retrieved reading values in their respective UI fields, ready to submit.
	    TextView t1 = (TextView) mAct.findViewById(R.id.blood_pressure_systolic_value);
	    TextView t2 = (TextView) mAct.findViewById(R.id.blood_pressure_diastolic_value);
	    TextView t3 = (TextView) mAct.findViewById(R.id.blood_pressure_heart_rate_value);
	    t1.setText(wSystolicString);
	    t2.setText(wDiastolicString);
	    t3.setText(wHeartRateString);
	  }
	  else
	  {
	    msgbox (mAct.getString(R.string.bluetooth_error_5_times), mAct.getString(R.string.error));
	  }
  }
  
  protected void msgbox(String iMessage, String iTitle)
	{
    AlertDialog.Builder dlgAlert  = new AlertDialog.Builder(mAct); //mAct: you may want to replace with 'this' if you move this method                     
    dlgAlert.setMessage(iMessage);
    dlgAlert.setTitle(iTitle);              
    dlgAlert.setPositiveButton(R.string.ok, null);
    dlgAlert.setCancelable(true);
    dlgAlert.create().show();
	}
  
  protected void onActivityResult (int iRequestCode, int iResultCode, Intent iData)
	{
	  if (iRequestCode == REQUEST_ENABLE_BT)
	  {
	    if(iResultCode == Activity.RESULT_OK) //mAct: you may want to remove it if you move this method
	    {
	      msgbox(mAct.getString(R.string.bluetooth_success_enabled), mAct.getString(R.string.success));
	      bluetooth(null);
	    }
	    else
	      msgbox(mAct.getString(R.string.bluetooth_error_not_enabled), mAct.getString(R.string.bluetooth_error_not_enabled));
	  }
	  else
	  {
	    msgbox(mAct.getString(R.string.bloodpressure_error_unknown_req_code) + iRequestCode, mAct.getString(R.string.error));
	  }
	}
  
  public void finish(View iView)
  {
  	//return to previous view
    	mAct.finish();  
  }
  
  public void preparePageTransition()
  {
		if (((SquareImageButton) (VitalSignsActivity.VITAL_SIGN_ACTIVITY
				.findViewById(R.id.blood_pressure))).isShown())
			showKeyboard();
//		switch (((VitalSignsActivity)VitalSignsActivity.VITAL_SIGN_ACTIVITY).getCurrentSelection())
//		{
//		case 6:
//			setSystolicFocused();
//			break;
//		case 7:
//			setDiastolicFocused();
//			break;
//
//		default:
//			break;
//		}
		//setTextFieldFocus(R.id.blood_pressure_heart_rate_value);
  	createNextPageListener(R.id.blood_pressure_diastolic_value);
		
  }
  
  protected void validateData(View iView){//fh
    //create state
    Context iContext = iView.getContext();
 
		if (this != null){
				try
				{
				// Get today as a Calendar  
					Calendar today = Calendar.getInstance();  
					// Subtract 1 day  
					today.add(Calendar.DATE, -7);  
					// Make an SQL Date out of that  
					Date lastSevenDays = new java.sql.Date(today.getTimeInMillis());
					ArrayList<BloodPressureReading> result = BloodPressureMapper.findLastSevenDays(lastSevenDays, iContext);
					TextView hr, sys, dia;
					
					hr = (TextView) mAct.findViewById(R.id.blood_pressure_heart_rate_value);
				  sys = (TextView) mAct.findViewById(R.id.blood_pressure_systolic_value);
				  dia = (TextView) mAct.findViewById(R.id.blood_pressure_diastolic_value);
					int tHr, tSys, tDia;
				  tHr = Integer.parseInt(hr.getText().toString());
				  tSys = Integer.parseInt(sys.getText().toString());
				  tDia = Integer.parseInt(dia.getText().toString());
				   
				   if((tSys<90 || tDia<60) || (tSys>120||tDia>80))
				   {
						isDataValid = false;
						return;
				   }
				   
				  int averageHeartRate = 0, averageSystolic = 0, averageDiastolic = 0;
				  for (BloodPressureReading bp: result){	
				  	averageHeartRate += bp.getHeartrate();
					  averageSystolic += bp.getSystolic();
					  averageDiastolic += bp.getDiastolic();
				  }
				  if (result.size() ==0){
				  	isDataValid=true;
				  	return;
				  }
				  averageHeartRate=averageHeartRate/result.size();
				  averageSystolic=averageSystolic/result.size();
				  averageDiastolic=averageDiastolic/result.size();
				  
				  int diff=0;
				  boolean diffHr = false;
				  boolean diffSys = false;
				  boolean diffDia = false;
				   
				  //for heart rate
				  if (averageHeartRate == tHr){
				  	diff=0;
				  } else if (averageHeartRate > tHr){
				  	 diff = averageHeartRate - tHr;
				  } else if (averageHeartRate < tHr){
				  	 diff = tHr-averageHeartRate;
				  }
				  if (diff >= 5){
				  	diffHr = true;
				  }
				  
				  //for systolic
				  diff=0;
				  if (averageSystolic == tSys){
				  	diff=0;
				  } else if (averageSystolic > tSys){
				  	 diff = averageSystolic - tSys;
				  } else if (averageSystolic < tSys){
				  	 diff = tSys-averageSystolic;
				  }
				  if (diff >= 30){
				  	diffSys = true;
				  }

				  //for diastolic
				  diff=0;
				  if (averageDiastolic == tDia){
				  	diff=0;
				  } else if (averageDiastolic > tDia){
				  	 diff = averageDiastolic - tDia;
				  } else if (averageDiastolic < tDia){
				  	 diff = tDia-averageDiastolic;
				  }
				  if (diff >= 20){
				  	diffDia = true;
				  }

				  if (diffHr || diffSys || diffDia){
				  	isDataValid = false;
				  }else {
				  	isDataValid= true;
				  }
				  

				} catch (MapperException e)
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
		}
		//fh
	}

  
}

